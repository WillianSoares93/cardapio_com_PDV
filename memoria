<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciar Prompt da IA - Sâmia</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="icon" href="https://raw.githubusercontent.com/WillianSoares93/cardapio_samia_PDV/refs/heads/main/logo.png" type="image/png">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f3f4f6;
            visibility: hidden;
        }
        #prompt-textarea {
            height: 60vh;
        }
    </style>
</head>
<body class="bg-gray-100">

    <header class="bg-white shadow-md">
        <div class="max-w-5xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-gray-800">Gerenciar Prompt da IA</h1>
            <a href="pdv.html" class="px-4 py-2 bg-gray-600 text-white text-sm font-bold rounded-md hover:bg-gray-700 transition-colors">
                <i class="fas fa-arrow-left mr-2"></i>Voltar ao PDV
            </a>
        </div>
    </header>

    <main class="max-w-5xl mx-auto p-4 sm:p-6 lg:p-8">
        <div class="bg-white p-6 rounded-lg shadow-lg">
            <div class="mb-4">
                <h2 class="text-xl font-semibold text-gray-800">Editor de Prompt do Atendente Virtual</h2>
                <p class="text-sm text-gray-600 mt-1">
                    Abaixo está o "cérebro" da IA. Edite as instruções com cuidado. As variáveis entre chaves (ex: `${CARDAPIO}`) são substituídas automaticamente e não devem ser alteradas.
                </p>
            </div>

            <textarea id="prompt-textarea" class="w-full p-4 border border-gray-300 rounded-md font-mono text-sm shadow-inner focus:ring-2 focus:ring-blue-500"></textarea>

            <div class="mt-4 flex justify-end items-center">
                <span id="feedback-message" class="text-green-600 font-medium mr-4"></span>
                <button id="save-prompt-btn" class="px-6 py-3 bg-blue-600 text-white font-bold rounded-md hover:bg-blue-700 transition-colors disabled:bg-blue-300">
                    <i class="fas fa-save mr-2"></i>Salvar Alterações
                </button>
            </div>
        </div>
    </main>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
        import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBJ44RVDGhBIlQBTx-pyIUp47XDKzRXk84",
            authDomain: "pizzaria-pdv.firebaseapp.com",
            projectId: "pizzaria-pdv",
            storageBucket: "pizzaria-pdv.firebasestorage.app",
            messagingSenderId: "304171744691",
            appId: "1:304171744691:web:e54d7f9fe55c7a75485fc6"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        const promptTextarea = document.getElementById('prompt-textarea');
        const savePromptBtn = document.getElementById('save-prompt-btn');
        const feedbackMessage = document.getElementById('feedback-message');

        const defaultPrompt = `
Você é um atendente de pizzaria inteligente e conversacional. Sua tarefa é analisar a mensagem de um cliente e decidir uma ação.

**AÇÕES POSSÍVEIS:**
1.  **PROCESS_ORDER:** Se o cliente está pedindo, adicionando ou modificando itens, ou fornecendo informações de entrega/pagamento.
2.  **ANSWER_QUESTION:** Se o cliente está fazendo uma pergunta geral (ex: "quais os ingredientes?", "qual o horário de funcionamento?").

**REGRAS DE NEGÓCIO PARA PROCESSAR PEDIDOS:**
-   **Pizza Meio a Meio:** O preço da pizza meio a meio é a SOMA da METADE do preço de cada sabor escolhido. Exemplo: metade de uma pizza de R$30 (R$15) com metade de uma de R$40 (R$20) custa R$35. O nome deve ser "Pizza [Tamanho] Meio a Meio: [Sabor 1] e [Sabor 2]". Pizzas promocionais só combinam com outras promocionais.
-   **Hambúrguer Montável:** O cliente escolherá os ingredientes. O nome deve ser "Hambúrguer Montado". Calcule o preço somando o valor base do "Hambúrguer Montável" com o preço de cada ingrediente escolhido.
-   **Itens Indisponíveis:** Se um item não estiver no cardápio, informe que não está disponível.
-   **Flexibilidade:** O cliente pode fornecer informações em qualquer ordem. Se ele fornecer o endereço antes dos itens, extraia o endereço e continue a pedir os itens.

**CONTEXTO DISPONÍVEL:**
-   **CARDÁPIO:** \${CARDAPIO}
-   **INGREDIENTES DO HAMBÚRGUER:** \${INGREDIENTES}
-   **HISTÓRICO DA CONVERSA:** \${HISTORICO}
-   **ESTADO ATUAL DO PEDIDO:** \${ESTADO_PEDIDO}

**MENSAGEM ATUAL DO CLIENTE:**
"\${MENSAGEM_CLIENTE}"

**FORMATO DE SAÍDA JSON (ESCOLHA UM):**
-   Para Ação 1: { "action": "PROCESS_ORDER", "itens": [{ "name": "...", "price": 0.00, "quantity": 1, "notes": "..." }], "address": "...", "paymentMethod": "..." }
-   Para Ação 2: { "action": "ANSWER_QUESTION", "answer": "Sua resposta aqui." }

Analise a mensagem do cliente e o contexto e retorne o JSON com a ação apropriada.
        `.trim();

        onAuthStateChanged(auth, (user) => {
            if (user) {
                document.body.style.visibility = 'visible';
                loadPrompt();
            } else {
                window.location.href = `login.html?redirect=gerenciar-prompt.html`;
            }
        });

        async function loadPrompt() {
            const promptRef = doc(db, "config", "bot_prompt");
            try {
                const docSnap = await getDoc(promptRef);
                if (docSnap.exists() && docSnap.data().template) {
                    promptTextarea.value = docSnap.data().template;
                } else {
                    promptTextarea.value = defaultPrompt;
                }
            } catch (error) {
                console.error("Erro ao carregar o prompt:", error);
                promptTextarea.value = "Erro ao carregar o prompt. Verifique o console.";
            }
        }

        savePromptBtn.addEventListener('click', async () => {
            savePromptBtn.disabled = true;
            savePromptBtn.textContent = 'Salvando...';
            feedbackMessage.textContent = '';

            const promptRef = doc(db, "config", "bot_prompt");
            try {
                await setDoc(promptRef, { template: promptTextarea.value });
                feedbackMessage.textContent = 'Salvo com sucesso!';
                setTimeout(() => feedbackMessage.textContent = '', 3000);
            } catch (error) {
                console.error("Erro ao salvar o prompt:", error);
                feedbackMessage.textContent = 'Erro ao salvar!';
                feedbackMessage.classList.remove('text-green-600');
                feedbackMessage.classList.add('text-red-600');
            } finally {
                savePromptBtn.disabled = false;
                savePromptBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Salvar Alterações';
            }
        });

    </script>
</body>
</html>
